"""Initial schema without checking balance constraint

Revision ID: ac1ca58386eb
Revises:
Create Date: 2025-10-26 21:22:11.604147

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ac1ca58386eb"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "customers",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("first_name", sa.String(length=100), nullable=False),
        sa.Column("last_name", sa.String(length=100), nullable=False),
        sa.Column("date_of_birth", sa.Date(), nullable=False),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("address_line_1", sa.String(length=255), nullable=True),
        sa.Column("address_line_2", sa.String(length=255), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("state", sa.String(length=2), nullable=True),
        sa.Column("zip_code", sa.String(length=10), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED')", name="chk_customer_status"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_customers_email"), "customers", ["email"], unique=True)
    op.create_index(op.f("ix_customers_status"), "customers", ["status"], unique=False)
    op.create_table(
        "accounts",
        sa.Column("customer_id", sa.UUID(), nullable=False),
        sa.Column("account_type", sa.String(length=20), nullable=False),
        sa.Column("account_number", sa.String(length=20), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("balance", sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        # Note: chk_balance_checking constraint intentionally omitted to allow negative balances (overdrafts)
        sa.CheckConstraint("(account_type != 'LOAN') OR (balance <= 0)", name="chk_balance_loan"),
        sa.CheckConstraint("account_type IN ('CHECKING', 'LOAN')", name="chk_account_type"),
        sa.CheckConstraint("status IN ('ACTIVE', 'CLOSED')", name="chk_account_status"),
        sa.ForeignKeyConstraint(["customer_id"], ["customers.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_accounts_account_number"), "accounts", ["account_number"], unique=True)
    op.create_index(op.f("ix_accounts_account_type"), "accounts", ["account_type"], unique=False)
    op.create_index(op.f("ix_accounts_customer_id"), "accounts", ["customer_id"], unique=False)
    op.create_index(op.f("ix_accounts_status"), "accounts", ["status"], unique=False)
    op.create_table(
        "users",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("customer_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint("role IN ('CUSTOMER', 'ADMIN', 'SUPER_ADMIN')", name="chk_user_role"),
        sa.ForeignKeyConstraint(["customer_id"], ["customers.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("customer_id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_role"), "users", ["role"], unique=False)
    op.create_table(
        "loan_applications",
        sa.Column("customer_id", sa.UUID(), nullable=False),
        sa.Column("loan_account_id", sa.UUID(), nullable=True),
        sa.Column("application_number", sa.String(length=20), nullable=False),
        sa.Column("requested_amount", sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column("approved_amount", sa.Numeric(precision=15, scale=2), nullable=True),
        sa.Column(
            "interest_rate",
            sa.Numeric(precision=5, scale=4),
            nullable=True,
            comment="Annual interest rate as decimal (e.g., 0.0525 for 5.25%)",
        ),
        sa.Column("term_months", sa.Integer(), nullable=True),
        sa.Column("purpose", sa.String(length=100), nullable=False),
        sa.Column("employment_status", sa.String(length=50), nullable=False),
        sa.Column("annual_income", sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("applied_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("reviewed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("disbursed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("external_account_number", sa.String(length=50), nullable=True),
        sa.Column("external_routing_number", sa.String(length=20), nullable=True),
        sa.Column("rejection_reason", sa.Text(), nullable=True),
        sa.Column("application_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('PENDING', 'APPROVED', 'REJECTED', 'DISBURSED', 'CANCELLED')",
            name="chk_loan_application_status",
        ),
        sa.CheckConstraint(
            "(approved_amount IS NULL) OR (approved_amount > 0)",
            name="chk_approved_amount_positive",
        ),
        sa.CheckConstraint(
            "(interest_rate IS NULL) OR (interest_rate >= 0)", name="chk_interest_rate_valid"
        ),
        sa.CheckConstraint(
            "(term_months IS NULL) OR (term_months > 0)", name="chk_term_months_positive"
        ),
        sa.CheckConstraint("annual_income >= 0", name="chk_annual_income_valid"),
        sa.CheckConstraint("requested_amount > 0", name="chk_requested_amount_positive"),
        sa.ForeignKeyConstraint(["customer_id"], ["customers.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["loan_account_id"], ["accounts.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_loan_applications_application_number"),
        "loan_applications",
        ["application_number"],
        unique=True,
    )
    op.create_index(
        op.f("ix_loan_applications_applied_at"), "loan_applications", ["applied_at"], unique=False
    )
    op.create_index(
        op.f("ix_loan_applications_customer_id"), "loan_applications", ["customer_id"], unique=False
    )
    op.create_index(
        op.f("ix_loan_applications_status"), "loan_applications", ["status"], unique=False
    )
    op.create_table(
        "transactions",
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("transaction_type", sa.String(length=30), nullable=False),
        sa.Column("amount", sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("balance_after", sa.Numeric(precision=15, scale=2), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("reference_number", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("transaction_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "status IN ('PENDING', 'COMPLETED', 'FAILED', 'REVERSED')",
            name="chk_transaction_status",
        ),
        sa.CheckConstraint(
            "transaction_type IN ('DEPOSIT', 'WITHDRAWAL', 'LOAN_DISBURSEMENT')",
            name="chk_transaction_type",
        ),
        sa.CheckConstraint("amount > 0", name="chk_amount_positive"),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_transactions_account_id"), "transactions", ["account_id"], unique=False
    )
    op.create_index(
        op.f("ix_transactions_reference_number"), "transactions", ["reference_number"], unique=True
    )
    op.create_index(op.f("ix_transactions_status"), "transactions", ["status"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_transactions_status"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_reference_number"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_account_id"), table_name="transactions")
    op.drop_table("transactions")
    op.drop_index(op.f("ix_loan_applications_status"), table_name="loan_applications")
    op.drop_index(op.f("ix_loan_applications_customer_id"), table_name="loan_applications")
    op.drop_index(op.f("ix_loan_applications_applied_at"), table_name="loan_applications")
    op.drop_index(op.f("ix_loan_applications_application_number"), table_name="loan_applications")
    op.drop_table("loan_applications")
    op.drop_index(op.f("ix_users_role"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_accounts_status"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_customer_id"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_account_type"), table_name="accounts")
    op.drop_index(op.f("ix_accounts_account_number"), table_name="accounts")
    op.drop_table("accounts")
    op.drop_index(op.f("ix_customers_status"), table_name="customers")
    op.drop_index(op.f("ix_customers_email"), table_name="customers")
    op.drop_table("customers")
    # ### end Alembic commands ###
